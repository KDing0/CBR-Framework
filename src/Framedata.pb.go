// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.2
// source: cbr/Framedata.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Framedata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharData map[string]*Framedata_CharData `protobuf:"bytes,1,rep,name=charData,proto3" json:"charData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Framedata) Reset() {
	*x = Framedata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_Framedata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framedata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framedata) ProtoMessage() {}

func (x *Framedata) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_Framedata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framedata.ProtoReflect.Descriptor instead.
func (*Framedata) Descriptor() ([]byte, []int) {
	return file_cbr_Framedata_proto_rawDescGZIP(), []int{0}
}

func (x *Framedata) GetCharData() map[string]*Framedata_CharData {
	if x != nil {
		return x.CharData
	}
	return nil
}

type Framedata_CharData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Author         string                              `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Version        string                              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Movedata       map[int64]*Framedata_MoveData       `protobuf:"bytes,4,rep,name=movedata,proto3" json:"movedata,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProjectileData map[int64]*Framedata_ProjectileData `protobuf:"bytes,5,rep,name=projectileData,proto3" json:"projectileData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Framedata_CharData) Reset() {
	*x = Framedata_CharData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_Framedata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framedata_CharData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framedata_CharData) ProtoMessage() {}

func (x *Framedata_CharData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_Framedata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framedata_CharData.ProtoReflect.Descriptor instead.
func (*Framedata_CharData) Descriptor() ([]byte, []int) {
	return file_cbr_Framedata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Framedata_CharData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Framedata_CharData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Framedata_CharData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Framedata_CharData) GetMovedata() map[int64]*Framedata_MoveData {
	if x != nil {
		return x.Movedata
	}
	return nil
}

func (x *Framedata_CharData) GetProjectileData() map[int64]*Framedata_ProjectileData {
	if x != nil {
		return x.ProjectileData
	}
	return nil
}

type Framedata_MoveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Startup          int32     `protobuf:"varint,2,opt,name=startup,proto3" json:"startup,omitempty"`
	Active           int32     `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	WhiffRecovery    int32     `protobuf:"varint,4,opt,name=whiffRecovery,proto3" json:"whiffRecovery,omitempty"`
	BlockRecovery    int32     `protobuf:"varint,5,opt,name=blockRecovery,proto3" json:"blockRecovery,omitempty"`
	Blockstun        int32     `protobuf:"varint,6,opt,name=blockstun,proto3" json:"blockstun,omitempty"`
	GatlingStart     int32     `protobuf:"varint,7,opt,name=gatlingStart,proto3" json:"gatlingStart,omitempty"`
	GatlingEnd       int32     `protobuf:"varint,8,opt,name=gatlingEnd,proto3" json:"gatlingEnd,omitempty"`
	WhiffCancelStart int32     `protobuf:"varint,9,opt,name=whiffCancelStart,proto3" json:"whiffCancelStart,omitempty"`
	WhiffCancelEnd   int32     `protobuf:"varint,10,opt,name=whiffCancelEnd,proto3" json:"whiffCancelEnd,omitempty"`
	LastMultihit     int32     `protobuf:"varint,11,opt,name=lastMultihit,proto3" json:"lastMultihit,omitempty"`
	HitAttribute     int32     `protobuf:"varint,12,opt,name=hitAttribute,proto3" json:"hitAttribute,omitempty"`
	GuardFlag        int32     `protobuf:"varint,13,opt,name=guardFlag,proto3" json:"guardFlag,omitempty"`
	InvulType        int32     `protobuf:"varint,14,opt,name=invulType,proto3" json:"invulType,omitempty"`
	InvulStart       int32     `protobuf:"varint,15,opt,name=invulStart,proto3" json:"invulStart,omitempty"`
	InvulEnd         int32     `protobuf:"varint,16,opt,name=invulEnd,proto3" json:"invulEnd,omitempty"`
	AerialMove       bool      `protobuf:"varint,17,opt,name=aerialMove,proto3" json:"aerialMove,omitempty"`
	ProjectileStart  []int32   `protobuf:"varint,18,rep,packed,name=projectileStart,proto3" json:"projectileStart,omitempty"`
	ProjectileId     []int32   `protobuf:"varint,19,rep,packed,name=projectileId,proto3" json:"projectileId,omitempty"`
	ProjectileX      []float32 `protobuf:"fixed32,20,rep,packed,name=projectileX,proto3" json:"projectileX,omitempty"`
	ProjectileY      []float32 `protobuf:"fixed32,21,rep,packed,name=projectileY,proto3" json:"projectileY,omitempty"`
	StateID          int32     `protobuf:"varint,22,opt,name=stateID,proto3" json:"stateID,omitempty"`
	MoveReference    int64     `protobuf:"varint,23,opt,name=moveReference,proto3" json:"moveReference,omitempty"`
}

func (x *Framedata_MoveData) Reset() {
	*x = Framedata_MoveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_Framedata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framedata_MoveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framedata_MoveData) ProtoMessage() {}

func (x *Framedata_MoveData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_Framedata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framedata_MoveData.ProtoReflect.Descriptor instead.
func (*Framedata_MoveData) Descriptor() ([]byte, []int) {
	return file_cbr_Framedata_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Framedata_MoveData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Framedata_MoveData) GetStartup() int32 {
	if x != nil {
		return x.Startup
	}
	return 0
}

func (x *Framedata_MoveData) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Framedata_MoveData) GetWhiffRecovery() int32 {
	if x != nil {
		return x.WhiffRecovery
	}
	return 0
}

func (x *Framedata_MoveData) GetBlockRecovery() int32 {
	if x != nil {
		return x.BlockRecovery
	}
	return 0
}

func (x *Framedata_MoveData) GetBlockstun() int32 {
	if x != nil {
		return x.Blockstun
	}
	return 0
}

func (x *Framedata_MoveData) GetGatlingStart() int32 {
	if x != nil {
		return x.GatlingStart
	}
	return 0
}

func (x *Framedata_MoveData) GetGatlingEnd() int32 {
	if x != nil {
		return x.GatlingEnd
	}
	return 0
}

func (x *Framedata_MoveData) GetWhiffCancelStart() int32 {
	if x != nil {
		return x.WhiffCancelStart
	}
	return 0
}

func (x *Framedata_MoveData) GetWhiffCancelEnd() int32 {
	if x != nil {
		return x.WhiffCancelEnd
	}
	return 0
}

func (x *Framedata_MoveData) GetLastMultihit() int32 {
	if x != nil {
		return x.LastMultihit
	}
	return 0
}

func (x *Framedata_MoveData) GetHitAttribute() int32 {
	if x != nil {
		return x.HitAttribute
	}
	return 0
}

func (x *Framedata_MoveData) GetGuardFlag() int32 {
	if x != nil {
		return x.GuardFlag
	}
	return 0
}

func (x *Framedata_MoveData) GetInvulType() int32 {
	if x != nil {
		return x.InvulType
	}
	return 0
}

func (x *Framedata_MoveData) GetInvulStart() int32 {
	if x != nil {
		return x.InvulStart
	}
	return 0
}

func (x *Framedata_MoveData) GetInvulEnd() int32 {
	if x != nil {
		return x.InvulEnd
	}
	return 0
}

func (x *Framedata_MoveData) GetAerialMove() bool {
	if x != nil {
		return x.AerialMove
	}
	return false
}

func (x *Framedata_MoveData) GetProjectileStart() []int32 {
	if x != nil {
		return x.ProjectileStart
	}
	return nil
}

func (x *Framedata_MoveData) GetProjectileId() []int32 {
	if x != nil {
		return x.ProjectileId
	}
	return nil
}

func (x *Framedata_MoveData) GetProjectileX() []float32 {
	if x != nil {
		return x.ProjectileX
	}
	return nil
}

func (x *Framedata_MoveData) GetProjectileY() []float32 {
	if x != nil {
		return x.ProjectileY
	}
	return nil
}

func (x *Framedata_MoveData) GetStateID() int32 {
	if x != nil {
		return x.StateID
	}
	return 0
}

func (x *Framedata_MoveData) GetMoveReference() int64 {
	if x != nil {
		return x.MoveReference
	}
	return 0
}

type Framedata_ProjectileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Startup       int32 `protobuf:"varint,2,opt,name=startup,proto3" json:"startup,omitempty"`
	Active        int32 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Blockstun     int32 `protobuf:"varint,4,opt,name=blockstun,proto3" json:"blockstun,omitempty"`
	LastMultihit  int32 `protobuf:"varint,5,opt,name=lastMultihit,proto3" json:"lastMultihit,omitempty"`
	HitAttribute  int32 `protobuf:"varint,6,opt,name=hitAttribute,proto3" json:"hitAttribute,omitempty"`
	GuardFlag     int32 `protobuf:"varint,7,opt,name=guardFlag,proto3" json:"guardFlag,omitempty"`
	InvulType     int32 `protobuf:"varint,8,opt,name=invulType,proto3" json:"invulType,omitempty"`
	InvulStart    int32 `protobuf:"varint,9,opt,name=invulStart,proto3" json:"invulStart,omitempty"`
	InvulEnd      int32 `protobuf:"varint,10,opt,name=invulEnd,proto3" json:"invulEnd,omitempty"`
	Duration      int32 `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
	StateID       int32 `protobuf:"varint,12,opt,name=stateID,proto3" json:"stateID,omitempty"`
	MoveReference int64 `protobuf:"varint,13,opt,name=moveReference,proto3" json:"moveReference,omitempty"`
}

func (x *Framedata_ProjectileData) Reset() {
	*x = Framedata_ProjectileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_Framedata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framedata_ProjectileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framedata_ProjectileData) ProtoMessage() {}

func (x *Framedata_ProjectileData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_Framedata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framedata_ProjectileData.ProtoReflect.Descriptor instead.
func (*Framedata_ProjectileData) Descriptor() ([]byte, []int) {
	return file_cbr_Framedata_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Framedata_ProjectileData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Framedata_ProjectileData) GetStartup() int32 {
	if x != nil {
		return x.Startup
	}
	return 0
}

func (x *Framedata_ProjectileData) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Framedata_ProjectileData) GetBlockstun() int32 {
	if x != nil {
		return x.Blockstun
	}
	return 0
}

func (x *Framedata_ProjectileData) GetLastMultihit() int32 {
	if x != nil {
		return x.LastMultihit
	}
	return 0
}

func (x *Framedata_ProjectileData) GetHitAttribute() int32 {
	if x != nil {
		return x.HitAttribute
	}
	return 0
}

func (x *Framedata_ProjectileData) GetGuardFlag() int32 {
	if x != nil {
		return x.GuardFlag
	}
	return 0
}

func (x *Framedata_ProjectileData) GetInvulType() int32 {
	if x != nil {
		return x.InvulType
	}
	return 0
}

func (x *Framedata_ProjectileData) GetInvulStart() int32 {
	if x != nil {
		return x.InvulStart
	}
	return 0
}

func (x *Framedata_ProjectileData) GetInvulEnd() int32 {
	if x != nil {
		return x.InvulEnd
	}
	return 0
}

func (x *Framedata_ProjectileData) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Framedata_ProjectileData) GetStateID() int32 {
	if x != nil {
		return x.StateID
	}
	return 0
}

func (x *Framedata_ProjectileData) GetMoveReference() int64 {
	if x != nil {
		return x.MoveReference
	}
	return 0
}

type Framedata_InputBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputId1     int32 `protobuf:"varint,1,opt,name=InputId1,proto3" json:"InputId1,omitempty"`
	InputId2     int32 `protobuf:"varint,2,opt,name=InputId2,proto3" json:"InputId2,omitempty"`
	InputId3     int32 `protobuf:"varint,3,opt,name=InputId3,proto3" json:"InputId3,omitempty"`
	CommandIndex int32 `protobuf:"varint,4,opt,name=CommandIndex,proto3" json:"CommandIndex,omitempty"`
	ResetTimer   int32 `protobuf:"varint,5,opt,name=ResetTimer,proto3" json:"ResetTimer,omitempty"`
	BufferTimer  int32 `protobuf:"varint,6,opt,name=BufferTimer,proto3" json:"BufferTimer,omitempty"`
	TameIndex    int32 `protobuf:"varint,7,opt,name=TameIndex,proto3" json:"TameIndex,omitempty"`
}

func (x *Framedata_InputBuffer) Reset() {
	*x = Framedata_InputBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_Framedata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framedata_InputBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framedata_InputBuffer) ProtoMessage() {}

func (x *Framedata_InputBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_Framedata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framedata_InputBuffer.ProtoReflect.Descriptor instead.
func (*Framedata_InputBuffer) Descriptor() ([]byte, []int) {
	return file_cbr_Framedata_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Framedata_InputBuffer) GetInputId1() int32 {
	if x != nil {
		return x.InputId1
	}
	return 0
}

func (x *Framedata_InputBuffer) GetInputId2() int32 {
	if x != nil {
		return x.InputId2
	}
	return 0
}

func (x *Framedata_InputBuffer) GetInputId3() int32 {
	if x != nil {
		return x.InputId3
	}
	return 0
}

func (x *Framedata_InputBuffer) GetCommandIndex() int32 {
	if x != nil {
		return x.CommandIndex
	}
	return 0
}

func (x *Framedata_InputBuffer) GetResetTimer() int32 {
	if x != nil {
		return x.ResetTimer
	}
	return 0
}

func (x *Framedata_InputBuffer) GetBufferTimer() int32 {
	if x != nil {
		return x.BufferTimer
	}
	return 0
}

func (x *Framedata_InputBuffer) GetTameIndex() int32 {
	if x != nil {
		return x.TameIndex
	}
	return 0
}

var File_cbr_Framedata_proto protoreflect.FileDescriptor

var file_cbr_Framedata_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x62, 0x72, 0x2f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbe, 0x0f, 0x0a, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x55, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa4, 0x03, 0x0a, 0x08,
	0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x54, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x55, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x61, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x80, 0x06, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x68, 0x69, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x68, 0x69, 0x66, 0x66, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x61, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x66, 0x66, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x77, 0x68, 0x69, 0x66, 0x66,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77,
	0x68, 0x69, 0x66, 0x66, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x68, 0x69, 0x66, 0x66, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x68, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x69, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68,
	0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x75, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x75, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x75, 0x6c,
	0x45, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x75, 0x6c,
	0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x58,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6c, 0x65, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c,
	0x65, 0x59, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6c, 0x65, 0x59, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x8c, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x74, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x68, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x75, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x75, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x76, 0x75, 0x6c, 0x45, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x6e, 0x76, 0x75, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0xe5, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x31,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x32, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x54, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06, 0x5a, 0x04,
	0x2f, 0x63, 0x62, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbr_Framedata_proto_rawDescOnce sync.Once
	file_cbr_Framedata_proto_rawDescData = file_cbr_Framedata_proto_rawDesc
)

func file_cbr_Framedata_proto_rawDescGZIP() []byte {
	file_cbr_Framedata_proto_rawDescOnce.Do(func() {
		file_cbr_Framedata_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbr_Framedata_proto_rawDescData)
	})
	return file_cbr_Framedata_proto_rawDescData
}

var file_cbr_Framedata_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cbr_Framedata_proto_goTypes = []interface{}{
	(*Framedata)(nil),                // 0: main.Framedata
	nil,                              // 1: main.Framedata.CharDataEntry
	(*Framedata_CharData)(nil),       // 2: main.Framedata.CharData
	(*Framedata_MoveData)(nil),       // 3: main.Framedata.MoveData
	(*Framedata_ProjectileData)(nil), // 4: main.Framedata.ProjectileData
	(*Framedata_InputBuffer)(nil),    // 5: main.Framedata.InputBuffer
	nil,                              // 6: main.Framedata.CharData.MovedataEntry
	nil,                              // 7: main.Framedata.CharData.ProjectileDataEntry
}
var file_cbr_Framedata_proto_depIdxs = []int32{
	1, // 0: main.Framedata.charData:type_name -> main.Framedata.CharDataEntry
	2, // 1: main.Framedata.CharDataEntry.value:type_name -> main.Framedata.CharData
	6, // 2: main.Framedata.CharData.movedata:type_name -> main.Framedata.CharData.MovedataEntry
	7, // 3: main.Framedata.CharData.projectileData:type_name -> main.Framedata.CharData.ProjectileDataEntry
	3, // 4: main.Framedata.CharData.MovedataEntry.value:type_name -> main.Framedata.MoveData
	4, // 5: main.Framedata.CharData.ProjectileDataEntry.value:type_name -> main.Framedata.ProjectileData
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_cbr_Framedata_proto_init() }
func file_cbr_Framedata_proto_init() {
	if File_cbr_Framedata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cbr_Framedata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framedata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_Framedata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framedata_CharData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_Framedata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framedata_MoveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_Framedata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framedata_ProjectileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_Framedata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framedata_InputBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbr_Framedata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cbr_Framedata_proto_goTypes,
		DependencyIndexes: file_cbr_Framedata_proto_depIdxs,
		MessageInfos:      file_cbr_Framedata_proto_msgTypes,
	}.Build()
	File_cbr_Framedata_proto = out.File
	file_cbr_Framedata_proto_rawDesc = nil
	file_cbr_Framedata_proto_goTypes = nil
	file_cbr_Framedata_proto_depIdxs = nil
}

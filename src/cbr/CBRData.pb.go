// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.2
// source: cbr/CBRData.proto

package cbr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CBRData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplayFile []*CBRData_ReplayFile `protobuf:"bytes,1,rep,name=replayFile,proto3" json:"replayFile,omitempty"`
	PlayerName string                `protobuf:"bytes,2,opt,name=playerName,proto3" json:"playerName,omitempty"`
	CharName   string                `protobuf:"bytes,3,opt,name=charName,proto3" json:"charName,omitempty"`
}

func (x *CBRData) Reset() {
	*x = CBRData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRData) ProtoMessage() {}

func (x *CBRData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRData.ProtoReflect.Descriptor instead.
func (*CBRData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{0}
}

func (x *CBRData) GetReplayFile() []*CBRData_ReplayFile {
	if x != nil {
		return x.ReplayFile
	}
	return nil
}

func (x *CBRData) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CBRData) GetCharName() string {
	if x != nil {
		return x.CharName
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPos float32 `protobuf:"fixed32,1,opt,name=xPos,proto3" json:"xPos,omitempty"`
	YPos float32 `protobuf:"fixed32,2,opt,name=yPos,proto3" json:"yPos,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetXPos() float32 {
	if x != nil {
		return x.XPos
	}
	return 0
}

func (x *Position) GetYPos() float32 {
	if x != nil {
		return x.YPos
	}
	return 0
}

type Velocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XVel float32 `protobuf:"fixed32,1,opt,name=xVel,proto3" json:"xVel,omitempty"`
	YVel float32 `protobuf:"fixed32,2,opt,name=yVel,proto3" json:"yVel,omitempty"`
}

func (x *Velocity) Reset() {
	*x = Velocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Velocity) ProtoMessage() {}

func (x *Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Velocity.ProtoReflect.Descriptor instead.
func (*Velocity) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{2}
}

func (x *Velocity) GetXVel() float32 {
	if x != nil {
		return x.XVel
	}
	return 0
}

func (x *Velocity) GetYVel() float32 {
	if x != nil {
		return x.YVel
	}
	return 0
}

type CBRRawFrames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplayFile []*CBRRawFrames_ReplayFile `protobuf:"bytes,1,rep,name=replayFile,proto3" json:"replayFile,omitempty"`
}

func (x *CBRRawFrames) Reset() {
	*x = CBRRawFrames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRRawFrames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRRawFrames) ProtoMessage() {}

func (x *CBRRawFrames) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRRawFrames.ProtoReflect.Descriptor instead.
func (*CBRRawFrames) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{3}
}

func (x *CBRRawFrames) GetReplayFile() []*CBRRawFrames_ReplayFile {
	if x != nil {
		return x.ReplayFile
	}
	return nil
}

type StageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftWallPos  float32 `protobuf:"fixed32,1,opt,name=leftWallPos,proto3" json:"leftWallPos,omitempty"`
	RightWallPos float32 `protobuf:"fixed32,2,opt,name=rightWallPos,proto3" json:"rightWallPos,omitempty"`
}

func (x *StageData) Reset() {
	*x = StageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageData) ProtoMessage() {}

func (x *StageData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageData.ProtoReflect.Descriptor instead.
func (*StageData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{4}
}

func (x *StageData) GetLeftWallPos() float32 {
	if x != nil {
		return x.LeftWallPos
	}
	return 0
}

func (x *StageData) GetRightWallPos() float32 {
	if x != nil {
		return x.RightWallPos
	}
	return 0
}

type InputBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputDirection []int32 `protobuf:"varint,1,rep,packed,name=InputDirection,proto3" json:"InputDirection,omitempty"`
	InputButton    []int32 `protobuf:"varint,2,rep,packed,name=InputButton,proto3" json:"InputButton,omitempty"`
}

func (x *InputBuffer) Reset() {
	*x = InputBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuffer) ProtoMessage() {}

func (x *InputBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuffer.ProtoReflect.Descriptor instead.
func (*InputBuffer) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{5}
}

func (x *InputBuffer) GetInputDirection() []int32 {
	if x != nil {
		return x.InputDirection
	}
	return nil
}

func (x *InputBuffer) GetInputButton() []int32 {
	if x != nil {
		return x.InputButton
	}
	return nil
}

type DebugDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary   string `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary int64  `protobuf:"varint,2,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Tertiary  int64  `protobuf:"varint,3,opt,name=tertiary,proto3" json:"tertiary,omitempty"`
}

func (x *DebugDescriptor) Reset() {
	*x = DebugDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugDescriptor) ProtoMessage() {}

func (x *DebugDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugDescriptor.ProtoReflect.Descriptor instead.
func (*DebugDescriptor) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{6}
}

func (x *DebugDescriptor) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *DebugDescriptor) GetSecondary() int64 {
	if x != nil {
		return x.Secondary
	}
	return 0
}

func (x *DebugDescriptor) GetTertiary() int64 {
	if x != nil {
		return x.Tertiary
	}
	return 0
}

//character specific values stored for comparison functions
type ComparisonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharPos                *Position    `protobuf:"bytes,5,opt,name=charPos,proto3" json:"charPos,omitempty"` //Array is used when data is saved for more than jsut the player. Player ID in the array is the cbrFocusCharNr
	Controllable           bool         `protobuf:"varint,6,opt,name=controllable,proto3" json:"controllable,omitempty"`
	InputBuffer            *InputBuffer `protobuf:"bytes,8,opt,name=inputBuffer,proto3" json:"inputBuffer,omitempty"`
	Blockstun              int32        `protobuf:"varint,11,opt,name=blockstun,proto3" json:"blockstun,omitempty"`
	HitStun                int32        `protobuf:"varint,12,opt,name=hitStun,proto3" json:"hitStun,omitempty"`
	CurrentMoveFrame       int32        `protobuf:"varint,13,opt,name=currentMoveFrame,proto3" json:"currentMoveFrame,omitempty"`
	CurrentMoveReferenceID int64        `protobuf:"varint,14,opt,name=currentMoveReferenceID,proto3" json:"currentMoveReferenceID,omitempty"`
	Facing                 bool         `protobuf:"varint,15,opt,name=facing,proto3" json:"facing,omitempty"` //facing "TRUE" == facing to the right
	MStateStanding         bool         `protobuf:"varint,17,opt,name=MStateStanding,proto3" json:"MStateStanding,omitempty"`
	MStateCrouching        bool         `protobuf:"varint,18,opt,name=MStateCrouching,proto3" json:"MStateCrouching,omitempty"`
	MStateAir              bool         `protobuf:"varint,19,opt,name=MStateAir,proto3" json:"MStateAir,omitempty"`
	MStateLying            bool         `protobuf:"varint,20,opt,name=MStateLying,proto3" json:"MStateLying,omitempty"`
	AStateIdle             bool         `protobuf:"varint,21,opt,name=AStateIdle,proto3" json:"AStateIdle,omitempty"`
	AStateHit              bool         `protobuf:"varint,22,opt,name=AStateHit,proto3" json:"AStateHit,omitempty"`
	AStateAttack           bool         `protobuf:"varint,23,opt,name=AStateAttack,proto3" json:"AStateAttack,omitempty"`
	MoveGuarded            bool         `protobuf:"varint,24,opt,name=moveGuarded,proto3" json:"moveGuarded,omitempty"`
	MoveHit                bool         `protobuf:"varint,25,opt,name=moveHit,proto3" json:"moveHit,omitempty"`
	SelfHit                bool         `protobuf:"varint,26,opt,name=selfHit,proto3" json:"selfHit,omitempty"`
	SelfGuard              bool         `protobuf:"varint,27,opt,name=selfGuard,proto3" json:"selfGuard,omitempty"`
	Velocity               *Velocity    `protobuf:"bytes,29,opt,name=velocity,proto3" json:"velocity,omitempty"`
	ControllableLastFrame  int32        `protobuf:"varint,31,opt,name=controllableLastFrame,proto3" json:"controllableLastFrame,omitempty"`
	GenericVars            *GenericVars `protobuf:"bytes,32,opt,name=genericVars,proto3" json:"genericVars,omitempty"`
	FrameAdv               int32        `protobuf:"varint,33,opt,name=frameAdv,proto3" json:"frameAdv,omitempty"`
	ComboMovesUsed         int32        `protobuf:"varint,34,opt,name=comboMovesUsed,proto3" json:"comboMovesUsed,omitempty"`
	Pressure               bool         `protobuf:"varint,35,opt,name=pressure,proto3" json:"pressure,omitempty"`
}

func (x *ComparisonData) Reset() {
	*x = ComparisonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonData) ProtoMessage() {}

func (x *ComparisonData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonData.ProtoReflect.Descriptor instead.
func (*ComparisonData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{7}
}

func (x *ComparisonData) GetCharPos() *Position {
	if x != nil {
		return x.CharPos
	}
	return nil
}

func (x *ComparisonData) GetControllable() bool {
	if x != nil {
		return x.Controllable
	}
	return false
}

func (x *ComparisonData) GetInputBuffer() *InputBuffer {
	if x != nil {
		return x.InputBuffer
	}
	return nil
}

func (x *ComparisonData) GetBlockstun() int32 {
	if x != nil {
		return x.Blockstun
	}
	return 0
}

func (x *ComparisonData) GetHitStun() int32 {
	if x != nil {
		return x.HitStun
	}
	return 0
}

func (x *ComparisonData) GetCurrentMoveFrame() int32 {
	if x != nil {
		return x.CurrentMoveFrame
	}
	return 0
}

func (x *ComparisonData) GetCurrentMoveReferenceID() int64 {
	if x != nil {
		return x.CurrentMoveReferenceID
	}
	return 0
}

func (x *ComparisonData) GetFacing() bool {
	if x != nil {
		return x.Facing
	}
	return false
}

func (x *ComparisonData) GetMStateStanding() bool {
	if x != nil {
		return x.MStateStanding
	}
	return false
}

func (x *ComparisonData) GetMStateCrouching() bool {
	if x != nil {
		return x.MStateCrouching
	}
	return false
}

func (x *ComparisonData) GetMStateAir() bool {
	if x != nil {
		return x.MStateAir
	}
	return false
}

func (x *ComparisonData) GetMStateLying() bool {
	if x != nil {
		return x.MStateLying
	}
	return false
}

func (x *ComparisonData) GetAStateIdle() bool {
	if x != nil {
		return x.AStateIdle
	}
	return false
}

func (x *ComparisonData) GetAStateHit() bool {
	if x != nil {
		return x.AStateHit
	}
	return false
}

func (x *ComparisonData) GetAStateAttack() bool {
	if x != nil {
		return x.AStateAttack
	}
	return false
}

func (x *ComparisonData) GetMoveGuarded() bool {
	if x != nil {
		return x.MoveGuarded
	}
	return false
}

func (x *ComparisonData) GetMoveHit() bool {
	if x != nil {
		return x.MoveHit
	}
	return false
}

func (x *ComparisonData) GetSelfHit() bool {
	if x != nil {
		return x.SelfHit
	}
	return false
}

func (x *ComparisonData) GetSelfGuard() bool {
	if x != nil {
		return x.SelfGuard
	}
	return false
}

func (x *ComparisonData) GetVelocity() *Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *ComparisonData) GetControllableLastFrame() int32 {
	if x != nil {
		return x.ControllableLastFrame
	}
	return 0
}

func (x *ComparisonData) GetGenericVars() *GenericVars {
	if x != nil {
		return x.GenericVars
	}
	return nil
}

func (x *ComparisonData) GetFrameAdv() int32 {
	if x != nil {
		return x.FrameAdv
	}
	return 0
}

func (x *ComparisonData) GetComboMovesUsed() int32 {
	if x != nil {
		return x.ComboMovesUsed
	}
	return 0
}

func (x *ComparisonData) GetPressure() bool {
	if x != nil {
		return x.Pressure
	}
	return false
}

type GenericVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenericFloatVars map[int32]float32 `protobuf:"bytes,1,rep,name=genericFloatVars,proto3" json:"genericFloatVars,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	GenericIntVars   map[int32]int32   `protobuf:"bytes,2,rep,name=genericIntVars,proto3" json:"genericIntVars,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GenericVars) Reset() {
	*x = GenericVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericVars) ProtoMessage() {}

func (x *GenericVars) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericVars.ProtoReflect.Descriptor instead.
func (*GenericVars) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{8}
}

func (x *GenericVars) GetGenericFloatVars() map[int32]float32 {
	if x != nil {
		return x.GenericFloatVars
	}
	return nil
}

func (x *GenericVars) GetGenericIntVars() map[int32]int32 {
	if x != nil {
		return x.GenericIntVars
	}
	return nil
}

type CharacterHelpers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterHelpers) Reset() {
	*x = CharacterHelpers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterHelpers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterHelpers) ProtoMessage() {}

func (x *CharacterHelpers) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterHelpers.ProtoReflect.Descriptor instead.
func (*CharacterHelpers) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{9}
}

//helper specific values stored for comparison functions
type HelperComparisonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMoveFrame       int32        `protobuf:"varint,2,opt,name=currentMoveFrame,proto3" json:"currentMoveFrame,omitempty"`
	CurrentMoveReferenceID int64        `protobuf:"varint,3,opt,name=currentMoveReferenceID,proto3" json:"currentMoveReferenceID,omitempty"`
	Velocity               *Velocity    `protobuf:"bytes,1,opt,name=velocity,proto3" json:"velocity,omitempty"`
	PositionX              float32      `protobuf:"fixed32,6,opt,name=positionX,proto3" json:"positionX,omitempty"`
	PositionY              float32      `protobuf:"fixed32,7,opt,name=positionY,proto3" json:"positionY,omitempty"`
	HelperID               int32        `protobuf:"varint,8,opt,name=helperID,proto3" json:"helperID,omitempty"`
	HitboxOut              bool         `protobuf:"varint,9,opt,name=hitboxOut,proto3" json:"hitboxOut,omitempty"`
	HurtboxOut             bool         `protobuf:"varint,10,opt,name=hurtboxOut,proto3" json:"hurtboxOut,omitempty"`
	AStateIdle             bool         `protobuf:"varint,11,opt,name=AStateIdle,proto3" json:"AStateIdle,omitempty"`
	AStateHit              bool         `protobuf:"varint,12,opt,name=AStateHit,proto3" json:"AStateHit,omitempty"`
	AStateAttack           bool         `protobuf:"varint,13,opt,name=AStateAttack,proto3" json:"AStateAttack,omitempty"`
	GenericVars            *GenericVars `protobuf:"bytes,14,opt,name=genericVars,proto3" json:"genericVars,omitempty"`
}

func (x *HelperComparisonData) Reset() {
	*x = HelperComparisonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelperComparisonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelperComparisonData) ProtoMessage() {}

func (x *HelperComparisonData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelperComparisonData.ProtoReflect.Descriptor instead.
func (*HelperComparisonData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{10}
}

func (x *HelperComparisonData) GetCurrentMoveFrame() int32 {
	if x != nil {
		return x.CurrentMoveFrame
	}
	return 0
}

func (x *HelperComparisonData) GetCurrentMoveReferenceID() int64 {
	if x != nil {
		return x.CurrentMoveReferenceID
	}
	return 0
}

func (x *HelperComparisonData) GetVelocity() *Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *HelperComparisonData) GetPositionX() float32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *HelperComparisonData) GetPositionY() float32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

func (x *HelperComparisonData) GetHelperID() int32 {
	if x != nil {
		return x.HelperID
	}
	return 0
}

func (x *HelperComparisonData) GetHitboxOut() bool {
	if x != nil {
		return x.HitboxOut
	}
	return false
}

func (x *HelperComparisonData) GetHurtboxOut() bool {
	if x != nil {
		return x.HurtboxOut
	}
	return false
}

func (x *HelperComparisonData) GetAStateIdle() bool {
	if x != nil {
		return x.AStateIdle
	}
	return false
}

func (x *HelperComparisonData) GetAStateHit() bool {
	if x != nil {
		return x.AStateHit
	}
	return false
}

func (x *HelperComparisonData) GetAStateAttack() bool {
	if x != nil {
		return x.AStateAttack
	}
	return false
}

func (x *HelperComparisonData) GetGenericVars() *GenericVars {
	if x != nil {
		return x.GenericVars
	}
	return nil
}

type CharCBRComparisonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparisonData *ComparisonData         `protobuf:"bytes,1,opt,name=comparisonData,proto3" json:"comparisonData,omitempty"`
	HelperData     []*HelperComparisonData `protobuf:"bytes,2,rep,name=helperData,proto3" json:"helperData,omitempty"`
}

func (x *CharCBRComparisonData) Reset() {
	*x = CharCBRComparisonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharCBRComparisonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharCBRComparisonData) ProtoMessage() {}

func (x *CharCBRComparisonData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharCBRComparisonData.ProtoReflect.Descriptor instead.
func (*CharCBRComparisonData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{11}
}

func (x *CharCBRComparisonData) GetComparisonData() *ComparisonData {
	if x != nil {
		return x.ComparisonData
	}
	return nil
}

func (x *CharCBRComparisonData) GetHelperData() []*HelperComparisonData {
	if x != nil {
		return x.HelperData
	}
	return nil
}

type WorldCBRComparisonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageData  *StageData `protobuf:"bytes,1,opt,name=stageData,proto3" json:"stageData,omitempty"`
	RoundState int32      `protobuf:"varint,2,opt,name=roundState,proto3" json:"roundState,omitempty"`
}

func (x *WorldCBRComparisonData) Reset() {
	*x = WorldCBRComparisonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldCBRComparisonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldCBRComparisonData) ProtoMessage() {}

func (x *WorldCBRComparisonData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldCBRComparisonData.ProtoReflect.Descriptor instead.
func (*WorldCBRComparisonData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{12}
}

func (x *WorldCBRComparisonData) GetStageData() *StageData {
	if x != nil {
		return x.StageData
	}
	return nil
}

func (x *WorldCBRComparisonData) GetRoundState() int32 {
	if x != nil {
		return x.RoundState
	}
	return 0
}

type CBRData_ReplayFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame          []*CBRData_Frame `protobuf:"bytes,1,rep,name=frame,proto3" json:"frame,omitempty"`
	Case           []*CBRData_Case  `protobuf:"bytes,2,rep,name=case,proto3" json:"case,omitempty"`
	CbrFocusCharNr int32            `protobuf:"varint,3,opt,name=cbrFocusCharNr,proto3" json:"cbrFocusCharNr,omitempty"`
	CharName       []string         `protobuf:"bytes,4,rep,name=charName,proto3" json:"charName,omitempty"`
	CharTeam       []int32          `protobuf:"varint,5,rep,packed,name=charTeam,proto3" json:"charTeam,omitempty"`
}

func (x *CBRData_ReplayFile) Reset() {
	*x = CBRData_ReplayFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRData_ReplayFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRData_ReplayFile) ProtoMessage() {}

func (x *CBRData_ReplayFile) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRData_ReplayFile.ProtoReflect.Descriptor instead.
func (*CBRData_ReplayFile) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CBRData_ReplayFile) GetFrame() []*CBRData_Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *CBRData_ReplayFile) GetCase() []*CBRData_Case {
	if x != nil {
		return x.Case
	}
	return nil
}

func (x *CBRData_ReplayFile) GetCbrFocusCharNr() int32 {
	if x != nil {
		return x.CbrFocusCharNr
	}
	return 0
}

func (x *CBRData_ReplayFile) GetCharName() []string {
	if x != nil {
		return x.CharName
	}
	return nil
}

func (x *CBRData_ReplayFile) GetCharTeam() []int32 {
	if x != nil {
		return x.CharTeam
	}
	return nil
}

type CBRData_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  int32 `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty"`
	Facing bool  `protobuf:"varint,2,opt,name=facing,proto3" json:"facing,omitempty"` //facing "TRUE" == facing to the right
}

func (x *CBRData_Frame) Reset() {
	*x = CBRData_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRData_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRData_Frame) ProtoMessage() {}

func (x *CBRData_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRData_Frame.ProtoReflect.Descriptor instead.
func (*CBRData_Frame) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CBRData_Frame) GetInput() int32 {
	if x != nil {
		return x.Input
	}
	return 0
}

func (x *CBRData_Frame) GetFacing() bool {
	if x != nil {
		return x.Facing
	}
	return false
}

type CBRData_Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameStartId          int32              `protobuf:"varint,1,opt,name=frameStartId,proto3" json:"frameStartId,omitempty"`
	FrameEndId            int32              `protobuf:"varint,2,opt,name=frameEndId,proto3" json:"frameEndId,omitempty"`
	CommandExecuteFrame   int32              `protobuf:"varint,3,opt,name=commandExecuteFrame,proto3" json:"commandExecuteFrame,omitempty"`
	Controllable          bool               `protobuf:"varint,7,opt,name=controllable,proto3" json:"controllable,omitempty"`
	ControllableLastFrame int32              `protobuf:"varint,31,opt,name=controllableLastFrame,proto3" json:"controllableLastFrame,omitempty"`
	ExecutionConditions   []int32            `protobuf:"varint,8,rep,packed,name=executionConditions,proto3" json:"executionConditions,omitempty"`
	DebugDescriptors      []*DebugDescriptor `protobuf:"bytes,30,rep,name=debugDescriptors,proto3" json:"debugDescriptors,omitempty"`
	//below are values important for similarity comparison
	CharCBRComparisonData  []*CharCBRComparisonData `protobuf:"bytes,6,rep,name=charCBRComparisonData,proto3" json:"charCBRComparisonData,omitempty"`
	WorldCBRComparisonData *WorldCBRComparisonData  `protobuf:"bytes,4,opt,name=worldCBRComparisonData,proto3" json:"worldCBRComparisonData,omitempty"`
}

func (x *CBRData_Case) Reset() {
	*x = CBRData_Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRData_Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRData_Case) ProtoMessage() {}

func (x *CBRData_Case) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRData_Case.ProtoReflect.Descriptor instead.
func (*CBRData_Case) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CBRData_Case) GetFrameStartId() int32 {
	if x != nil {
		return x.FrameStartId
	}
	return 0
}

func (x *CBRData_Case) GetFrameEndId() int32 {
	if x != nil {
		return x.FrameEndId
	}
	return 0
}

func (x *CBRData_Case) GetCommandExecuteFrame() int32 {
	if x != nil {
		return x.CommandExecuteFrame
	}
	return 0
}

func (x *CBRData_Case) GetControllable() bool {
	if x != nil {
		return x.Controllable
	}
	return false
}

func (x *CBRData_Case) GetControllableLastFrame() int32 {
	if x != nil {
		return x.ControllableLastFrame
	}
	return 0
}

func (x *CBRData_Case) GetExecutionConditions() []int32 {
	if x != nil {
		return x.ExecutionConditions
	}
	return nil
}

func (x *CBRData_Case) GetDebugDescriptors() []*DebugDescriptor {
	if x != nil {
		return x.DebugDescriptors
	}
	return nil
}

func (x *CBRData_Case) GetCharCBRComparisonData() []*CharCBRComparisonData {
	if x != nil {
		return x.CharCBRComparisonData
	}
	return nil
}

func (x *CBRData_Case) GetWorldCBRComparisonData() *WorldCBRComparisonData {
	if x != nil {
		return x.WorldCBRComparisonData
	}
	return nil
}

type CBRRawFrames_ReplayFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame          []*CBRRawFrames_Frame `protobuf:"bytes,1,rep,name=frame,proto3" json:"frame,omitempty"`
	CbrFocusCharNr int32                 `protobuf:"varint,2,opt,name=cbrFocusCharNr,proto3" json:"cbrFocusCharNr,omitempty"`
	CharName       []string              `protobuf:"bytes,3,rep,name=charName,proto3" json:"charName,omitempty"`
	CharTeam       []int32               `protobuf:"varint,4,rep,packed,name=charTeam,proto3" json:"charTeam,omitempty"`
	PlayerName     []string              `protobuf:"bytes,5,rep,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *CBRRawFrames_ReplayFile) Reset() {
	*x = CBRRawFrames_ReplayFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRRawFrames_ReplayFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRRawFrames_ReplayFile) ProtoMessage() {}

func (x *CBRRawFrames_ReplayFile) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRRawFrames_ReplayFile.ProtoReflect.Descriptor instead.
func (*CBRRawFrames_ReplayFile) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CBRRawFrames_ReplayFile) GetFrame() []*CBRRawFrames_Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *CBRRawFrames_ReplayFile) GetCbrFocusCharNr() int32 {
	if x != nil {
		return x.CbrFocusCharNr
	}
	return 0
}

func (x *CBRRawFrames_ReplayFile) GetCharName() []string {
	if x != nil {
		return x.CharName
	}
	return nil
}

func (x *CBRRawFrames_ReplayFile) GetCharTeam() []int32 {
	if x != nil {
		return x.CharTeam
	}
	return nil
}

func (x *CBRRawFrames_ReplayFile) GetPlayerName() []string {
	if x != nil {
		return x.PlayerName
	}
	return nil
}

type CBRRawFrames_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharData               []*CBRRawFrames_CharData `protobuf:"bytes,1,rep,name=charData,proto3" json:"charData,omitempty"`
	WorldCBRComparisonData *WorldCBRComparisonData  `protobuf:"bytes,2,opt,name=worldCBRComparisonData,proto3" json:"worldCBRComparisonData,omitempty"` //comparison function relevant
}

func (x *CBRRawFrames_Frame) Reset() {
	*x = CBRRawFrames_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRRawFrames_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRRawFrames_Frame) ProtoMessage() {}

func (x *CBRRawFrames_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRRawFrames_Frame.ProtoReflect.Descriptor instead.
func (*CBRRawFrames_Frame) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CBRRawFrames_Frame) GetCharData() []*CBRRawFrames_CharData {
	if x != nil {
		return x.CharData
	}
	return nil
}

func (x *CBRRawFrames_Frame) GetWorldCBRComparisonData() *WorldCBRComparisonData {
	if x != nil {
		return x.WorldCBRComparisonData
	}
	return nil
}

type CBRRawFrames_CharData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  int32 `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty"`
	Facing bool  `protobuf:"varint,2,opt,name=facing,proto3" json:"facing,omitempty"`
	//not yet in use
	LifePercentage          float32                    `protobuf:"fixed32,7,opt,name=lifePercentage,proto3" json:"lifePercentage,omitempty"`
	MeterPercentage         float32                    `protobuf:"fixed32,8,opt,name=meterPercentage,proto3" json:"meterPercentage,omitempty"`
	DizzyPercentage         float32                    `protobuf:"fixed32,9,opt,name=dizzyPercentage,proto3" json:"dizzyPercentage,omitempty"`
	GuardPointsPercentage   float32                    `protobuf:"fixed32,10,opt,name=guardPointsPercentage,proto3" json:"guardPointsPercentage,omitempty"`
	RecoverableHpPercentage float32                    `protobuf:"fixed32,11,opt,name=recoverableHpPercentage,proto3" json:"recoverableHpPercentage,omitempty"`
	CommandExecution        map[string]int32           `protobuf:"bytes,22,rep,name=commandExecution,proto3" json:"commandExecution,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExecutionConditions     int32                      `protobuf:"varint,23,opt,name=executionConditions,proto3" json:"executionConditions,omitempty"`
	GenericFloatVars        []float32                  `protobuf:"fixed32,24,rep,packed,name=genericFloatVars,proto3" json:"genericFloatVars,omitempty"`
	GenericIntVars          []int32                    `protobuf:"varint,25,rep,packed,name=genericIntVars,proto3" json:"genericIntVars,omitempty"`
	MeterMax                float32                    `protobuf:"fixed32,26,opt,name=meterMax,proto3" json:"meterMax,omitempty"`
	IkemenMoveID            int32                      `protobuf:"varint,38,opt,name=ikemenMoveID,proto3" json:"ikemenMoveID,omitempty"`
	IkemenMoveFrame         int32                      `protobuf:"varint,39,opt,name=ikemenMoveFrame,proto3" json:"ikemenMoveFrame,omitempty"`
	DebugDescriptors        []*DebugDescriptor         `protobuf:"bytes,40,rep,name=debugDescriptors,proto3" json:"debugDescriptors,omitempty"`
	ComparisonData          *ComparisonData            `protobuf:"bytes,3,opt,name=comparisonData,proto3" json:"comparisonData,omitempty"` //comparison function relevant
	HelperData              []*CBRRawFrames_HelperData `protobuf:"bytes,4,rep,name=helperData,proto3" json:"helperData,omitempty"`         //comparison function relevant
}

func (x *CBRRawFrames_CharData) Reset() {
	*x = CBRRawFrames_CharData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRRawFrames_CharData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRRawFrames_CharData) ProtoMessage() {}

func (x *CBRRawFrames_CharData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRRawFrames_CharData.ProtoReflect.Descriptor instead.
func (*CBRRawFrames_CharData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CBRRawFrames_CharData) GetInput() int32 {
	if x != nil {
		return x.Input
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetFacing() bool {
	if x != nil {
		return x.Facing
	}
	return false
}

func (x *CBRRawFrames_CharData) GetLifePercentage() float32 {
	if x != nil {
		return x.LifePercentage
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetMeterPercentage() float32 {
	if x != nil {
		return x.MeterPercentage
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetDizzyPercentage() float32 {
	if x != nil {
		return x.DizzyPercentage
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetGuardPointsPercentage() float32 {
	if x != nil {
		return x.GuardPointsPercentage
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetRecoverableHpPercentage() float32 {
	if x != nil {
		return x.RecoverableHpPercentage
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetCommandExecution() map[string]int32 {
	if x != nil {
		return x.CommandExecution
	}
	return nil
}

func (x *CBRRawFrames_CharData) GetExecutionConditions() int32 {
	if x != nil {
		return x.ExecutionConditions
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetGenericFloatVars() []float32 {
	if x != nil {
		return x.GenericFloatVars
	}
	return nil
}

func (x *CBRRawFrames_CharData) GetGenericIntVars() []int32 {
	if x != nil {
		return x.GenericIntVars
	}
	return nil
}

func (x *CBRRawFrames_CharData) GetMeterMax() float32 {
	if x != nil {
		return x.MeterMax
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetIkemenMoveID() int32 {
	if x != nil {
		return x.IkemenMoveID
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetIkemenMoveFrame() int32 {
	if x != nil {
		return x.IkemenMoveFrame
	}
	return 0
}

func (x *CBRRawFrames_CharData) GetDebugDescriptors() []*DebugDescriptor {
	if x != nil {
		return x.DebugDescriptors
	}
	return nil
}

func (x *CBRRawFrames_CharData) GetComparisonData() *ComparisonData {
	if x != nil {
		return x.ComparisonData
	}
	return nil
}

func (x *CBRRawFrames_CharData) GetHelperData() []*CBRRawFrames_HelperData {
	if x != nil {
		return x.HelperData
	}
	return nil
}

type CBRRawFrames_HelperData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facing bool `protobuf:"varint,1,opt,name=facing,proto3" json:"facing,omitempty"`
	//not yet in use
	LifePercentage   float32               `protobuf:"fixed32,6,opt,name=lifePercentage,proto3" json:"lifePercentage,omitempty"`
	HitStun          int32                 `protobuf:"varint,9,opt,name=hitStun,proto3" json:"hitStun,omitempty"`
	MoveHit          bool                  `protobuf:"varint,10,opt,name=moveHit,proto3" json:"moveHit,omitempty"`
	MoveGuarded      bool                  `protobuf:"varint,11,opt,name=moveGuarded,proto3" json:"moveGuarded,omitempty"`
	Controllable     bool                  `protobuf:"varint,12,opt,name=controllable,proto3" json:"controllable,omitempty"`
	GenericFloatVars []float32             `protobuf:"fixed32,16,rep,packed,name=genericFloatVars,proto3" json:"genericFloatVars,omitempty"`
	GenericIntVars   []int32               `protobuf:"varint,17,rep,packed,name=genericIntVars,proto3" json:"genericIntVars,omitempty"`
	MStateStanding   bool                  `protobuf:"varint,20,opt,name=MStateStanding,proto3" json:"MStateStanding,omitempty"`
	MStateCrouching  bool                  `protobuf:"varint,21,opt,name=MStateCrouching,proto3" json:"MStateCrouching,omitempty"`
	MStateAir        bool                  `protobuf:"varint,22,opt,name=MStateAir,proto3" json:"MStateAir,omitempty"`
	MStateLying      bool                  `protobuf:"varint,23,opt,name=MStateLying,proto3" json:"MStateLying,omitempty"`
	CompData         *HelperComparisonData `protobuf:"bytes,24,opt,name=compData,proto3" json:"compData,omitempty"` //comparison function relevant
}

func (x *CBRRawFrames_HelperData) Reset() {
	*x = CBRRawFrames_HelperData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbr_CBRData_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBRRawFrames_HelperData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBRRawFrames_HelperData) ProtoMessage() {}

func (x *CBRRawFrames_HelperData) ProtoReflect() protoreflect.Message {
	mi := &file_cbr_CBRData_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBRRawFrames_HelperData.ProtoReflect.Descriptor instead.
func (*CBRRawFrames_HelperData) Descriptor() ([]byte, []int) {
	return file_cbr_CBRData_proto_rawDescGZIP(), []int{3, 3}
}

func (x *CBRRawFrames_HelperData) GetFacing() bool {
	if x != nil {
		return x.Facing
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetLifePercentage() float32 {
	if x != nil {
		return x.LifePercentage
	}
	return 0
}

func (x *CBRRawFrames_HelperData) GetHitStun() int32 {
	if x != nil {
		return x.HitStun
	}
	return 0
}

func (x *CBRRawFrames_HelperData) GetMoveHit() bool {
	if x != nil {
		return x.MoveHit
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetMoveGuarded() bool {
	if x != nil {
		return x.MoveGuarded
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetControllable() bool {
	if x != nil {
		return x.Controllable
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetGenericFloatVars() []float32 {
	if x != nil {
		return x.GenericFloatVars
	}
	return nil
}

func (x *CBRRawFrames_HelperData) GetGenericIntVars() []int32 {
	if x != nil {
		return x.GenericIntVars
	}
	return nil
}

func (x *CBRRawFrames_HelperData) GetMStateStanding() bool {
	if x != nil {
		return x.MStateStanding
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetMStateCrouching() bool {
	if x != nil {
		return x.MStateCrouching
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetMStateAir() bool {
	if x != nil {
		return x.MStateAir
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetMStateLying() bool {
	if x != nil {
		return x.MStateLying
	}
	return false
}

func (x *CBRRawFrames_HelperData) GetCompData() *HelperComparisonData {
	if x != nil {
		return x.CompData
	}
	return nil
}

var File_cbr_CBRData_proto protoreflect.FileDescriptor

var file_cbr_CBRData_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x62, 0x72, 0x2f, 0x43, 0x42, 0x52, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xef, 0x06, 0x0a, 0x07, 0x43, 0x42,
	0x52, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x42, 0x52, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x42, 0x52, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x42, 0x52, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x63, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x62, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x4e, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x62, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x72, 0x4e, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x35, 0x0a,
	0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x1a, 0xf4, 0x03, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x72, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x42, 0x52,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15,
	0x63, 0x68, 0x61, 0x72, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x42,
	0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x50, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x79, 0x50, 0x6f, 0x73, 0x22,
	0x32, 0x0a, 0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x78,
	0x56, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x56, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x56, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x79,
	0x56, 0x65, 0x6c, 0x22, 0x87, 0x0e, 0x0a, 0x0c, 0x43, 0x42, 0x52, 0x52, 0x61, 0x77, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x42, 0x52, 0x52, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x1a, 0xbc, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x42, 0x52, 0x52, 0x61, 0x77, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x62, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68,
	0x61, 0x72, 0x4e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x62, 0x72, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x72, 0x4e, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x42, 0x52, 0x52, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x42,
	0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xf8, 0x06, 0x0a, 0x08,
	0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x6c, 0x69, 0x66, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x7a, 0x7a,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x64, 0x69, 0x7a, 0x7a, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x42, 0x52, 0x52, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6b, 0x65, 0x6d, 0x65, 0x6e, 0x4d, 0x6f, 0x76,
	0x65, 0x49, 0x44, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6b, 0x65, 0x6d, 0x65,
	0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6b, 0x65, 0x6d, 0x65,
	0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x69, 0x6b, 0x65, 0x6d, 0x65, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x42,
	0x52, 0x52, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe4, 0x03, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x69, 0x66, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x53, 0x74, 0x75, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x69, 0x74, 0x53, 0x74, 0x75, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x76,
	0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6d, 0x6f, 0x76, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x4d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x75,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x69, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65,
	0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6c, 0x65, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0x57, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0f, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79,
	0x22, 0xa6, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x74, 0x75, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x74, 0x75, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x53, 0x74, 0x75, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x69, 0x74, 0x53, 0x74, 0x75, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x75,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x41, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x41, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x41, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x66, 0x48, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x6c,
	0x66, 0x48, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x72, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x52, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x41, 0x64, 0x76, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x41, 0x64, 0x76, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f,
	0x76, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x43, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x14, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x75, 0x72, 0x74,
	0x62, 0x6f, 0x78, 0x4f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x75,
	0x72, 0x74, 0x62, 0x6f, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x72, 0x73, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x72, 0x73, 0x22,
	0x91, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x43, 0x42, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x42, 0x52, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x5a, 0x04,
	0x2f, 0x63, 0x62, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbr_CBRData_proto_rawDescOnce sync.Once
	file_cbr_CBRData_proto_rawDescData = file_cbr_CBRData_proto_rawDesc
)

func file_cbr_CBRData_proto_rawDescGZIP() []byte {
	file_cbr_CBRData_proto_rawDescOnce.Do(func() {
		file_cbr_CBRData_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbr_CBRData_proto_rawDescData)
	})
	return file_cbr_CBRData_proto_rawDescData
}

var file_cbr_CBRData_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_cbr_CBRData_proto_goTypes = []interface{}{
	(*CBRData)(nil),                 // 0: main.CBRData
	(*Position)(nil),                // 1: main.Position
	(*Velocity)(nil),                // 2: main.Velocity
	(*CBRRawFrames)(nil),            // 3: main.CBRRawFrames
	(*StageData)(nil),               // 4: main.StageData
	(*InputBuffer)(nil),             // 5: main.InputBuffer
	(*DebugDescriptor)(nil),         // 6: main.DebugDescriptor
	(*ComparisonData)(nil),          // 7: main.ComparisonData
	(*GenericVars)(nil),             // 8: main.GenericVars
	(*CharacterHelpers)(nil),        // 9: main.CharacterHelpers
	(*HelperComparisonData)(nil),    // 10: main.HelperComparisonData
	(*CharCBRComparisonData)(nil),   // 11: main.CharCBRComparisonData
	(*WorldCBRComparisonData)(nil),  // 12: main.WorldCBRComparisonData
	(*CBRData_ReplayFile)(nil),      // 13: main.CBRData.ReplayFile
	(*CBRData_Frame)(nil),           // 14: main.CBRData.Frame
	(*CBRData_Case)(nil),            // 15: main.CBRData.Case
	(*CBRRawFrames_ReplayFile)(nil), // 16: main.CBRRawFrames.ReplayFile
	(*CBRRawFrames_Frame)(nil),      // 17: main.CBRRawFrames.Frame
	(*CBRRawFrames_CharData)(nil),   // 18: main.CBRRawFrames.CharData
	(*CBRRawFrames_HelperData)(nil), // 19: main.CBRRawFrames.HelperData
	nil,                             // 20: main.CBRRawFrames.CharData.CommandExecutionEntry
	nil,                             // 21: main.GenericVars.GenericFloatVarsEntry
	nil,                             // 22: main.GenericVars.GenericIntVarsEntry
}
var file_cbr_CBRData_proto_depIdxs = []int32{
	13, // 0: main.CBRData.replayFile:type_name -> main.CBRData.ReplayFile
	16, // 1: main.CBRRawFrames.replayFile:type_name -> main.CBRRawFrames.ReplayFile
	1,  // 2: main.ComparisonData.charPos:type_name -> main.Position
	5,  // 3: main.ComparisonData.inputBuffer:type_name -> main.InputBuffer
	2,  // 4: main.ComparisonData.velocity:type_name -> main.Velocity
	8,  // 5: main.ComparisonData.genericVars:type_name -> main.GenericVars
	21, // 6: main.GenericVars.genericFloatVars:type_name -> main.GenericVars.GenericFloatVarsEntry
	22, // 7: main.GenericVars.genericIntVars:type_name -> main.GenericVars.GenericIntVarsEntry
	2,  // 8: main.HelperComparisonData.velocity:type_name -> main.Velocity
	8,  // 9: main.HelperComparisonData.genericVars:type_name -> main.GenericVars
	7,  // 10: main.CharCBRComparisonData.comparisonData:type_name -> main.ComparisonData
	10, // 11: main.CharCBRComparisonData.helperData:type_name -> main.HelperComparisonData
	4,  // 12: main.WorldCBRComparisonData.stageData:type_name -> main.StageData
	14, // 13: main.CBRData.ReplayFile.frame:type_name -> main.CBRData.Frame
	15, // 14: main.CBRData.ReplayFile.case:type_name -> main.CBRData.Case
	6,  // 15: main.CBRData.Case.debugDescriptors:type_name -> main.DebugDescriptor
	11, // 16: main.CBRData.Case.charCBRComparisonData:type_name -> main.CharCBRComparisonData
	12, // 17: main.CBRData.Case.worldCBRComparisonData:type_name -> main.WorldCBRComparisonData
	17, // 18: main.CBRRawFrames.ReplayFile.frame:type_name -> main.CBRRawFrames.Frame
	18, // 19: main.CBRRawFrames.Frame.charData:type_name -> main.CBRRawFrames.CharData
	12, // 20: main.CBRRawFrames.Frame.worldCBRComparisonData:type_name -> main.WorldCBRComparisonData
	20, // 21: main.CBRRawFrames.CharData.commandExecution:type_name -> main.CBRRawFrames.CharData.CommandExecutionEntry
	6,  // 22: main.CBRRawFrames.CharData.debugDescriptors:type_name -> main.DebugDescriptor
	7,  // 23: main.CBRRawFrames.CharData.comparisonData:type_name -> main.ComparisonData
	19, // 24: main.CBRRawFrames.CharData.helperData:type_name -> main.CBRRawFrames.HelperData
	10, // 25: main.CBRRawFrames.HelperData.compData:type_name -> main.HelperComparisonData
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_cbr_CBRData_proto_init() }
func file_cbr_CBRData_proto_init() {
	if File_cbr_CBRData_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cbr_CBRData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Velocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRRawFrames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterHelpers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelperComparisonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharCBRComparisonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldCBRComparisonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRData_ReplayFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRData_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRData_Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRRawFrames_ReplayFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRRawFrames_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRRawFrames_CharData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbr_CBRData_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBRRawFrames_HelperData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbr_CBRData_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cbr_CBRData_proto_goTypes,
		DependencyIndexes: file_cbr_CBRData_proto_depIdxs,
		MessageInfos:      file_cbr_CBRData_proto_msgTypes,
	}.Build()
	File_cbr_CBRData_proto = out.File
	file_cbr_CBRData_proto_rawDesc = nil
	file_cbr_CBRData_proto_goTypes = nil
	file_cbr_CBRData_proto_depIdxs = nil
}
